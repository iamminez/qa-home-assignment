name: Run CardValidation Tests in Docker

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      ACTIONS_RUNNER_DEBUG: true
      ACTIONS_STEP_DEBUG: true

    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Clear old actions cache (optional but helpful)
    - name: Clear old actions cache
      run: rm -rf ~/.actions

    # Step 3: Build Docker image
    - name: Build Docker image
      run: docker build -t cardvalidation-tests -f Dockerfile.Tests .

    # Step 4: Extract test results from container
    - name: Extract test results
      run: |
        docker create --name cardvalidation-container cardvalidation-tests
        docker cp cardvalidation-container:/app/TestResults ./TestResults
        docker rm cardvalidation-container

    # Step 5: Debug TestResults folder
    - name: Debug TestResults
      run: ls -R TestResults

    # Step 6: Upload Unit Test Results
    - name: Upload Unit Test Results
      uses: actions/upload-artifact@v4.3.1
      with:
        name: cardvalidation-unit-test-results
        path: TestResults/unit-tests.trx

    # Step 7: Upload Integration Test Results
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v4.3.1
      with:
        name: cardvalidation-integration-test-results
        path: TestResults/integration-tests.trx

    # Step 8: Generate HTML Reports
    - name: Generate HTML Reports
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:TestResults/*.trx -targetdir:TestResults/Report -reporttypes:Html

    # Step 9: Upload HTML Report
    - name: Upload HTML Report
      uses: actions/upload-artifact@v4.3.1
      with:
        name: html-report
