// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace CardValidation.Tests.Integration.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ValidateCreditCardFeature : object, global::Xunit.IClassFixture<ValidateCreditCardFeature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Validate Credit Card", "  As a QA engineer\r\n  I want to validate credit card numbers via the API\r\n  So th" +
                "at I can ensure the correct payment system is returned", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CardValidation.feature"
#line hidden
        
        public ValidateCreditCardFeature(ValidateCreditCardFeature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/CardValidation.feature.ndjson", 20);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Full card details is valid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "Full card details is valid")]
        public async global::System.Threading.Tasks.Task FullCardDetailsIsValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Full card details is valid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 6
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 7
    await testRunner.GivenAsync("I have the owner \"Jane Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 8
    await testRunner.GivenAsync("I have a credit card number \"4111111111111111\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 9
    await testRunner.GivenAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 10
    await testRunner.GivenAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 11
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Visa card number is valid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "Visa card number is valid")]
        public async global::System.Threading.Tasks.Task VisaCardNumberIsValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Visa card number is valid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 14
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 15
    await testRunner.GivenAsync("I have the owner \"Jane Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 16
    await testRunner.GivenAsync("I have a credit card number \"4111111111111111\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 17
    await testRunner.GivenAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 18
    await testRunner.GivenAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 19
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 20
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 21
    await testRunner.AndAsync("the response should contain \"Visa\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="MasterCard card number is valid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "MasterCard card number is valid")]
        public async global::System.Threading.Tasks.Task MasterCardCardNumberIsValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("MasterCard card number is valid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 23
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 24
    await testRunner.GivenAsync("I have the owner \"Jane Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 25
    await testRunner.GivenAsync("I have a credit card number \"5500000000000004\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 26
    await testRunner.GivenAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 27
    await testRunner.GivenAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 28
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 30
    await testRunner.AndAsync("the response should contain \"MasterCard\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="AmericanExpress card number is valid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "AmericanExpress card number is valid")]
        public async global::System.Threading.Tasks.Task AmericanExpressCardNumberIsValid()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("AmericanExpress card number is valid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 32
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 33
    await testRunner.GivenAsync("I have the owner \"Jane Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 34
    await testRunner.GivenAsync("I have a credit card number \"340000000000009\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 35
    await testRunner.GivenAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 36
    await testRunner.GivenAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 37
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
    await testRunner.ThenAsync("the response status code should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 39
    await testRunner.AndAsync("the response should contain \"AmericanExpress\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Owner should be required")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "Owner should be required")]
        public async global::System.Threading.Tasks.Task OwnerShouldBeRequired()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "4";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Owner should be required", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 41
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 42
    await testRunner.GivenAsync("I have a credit card number \"340000000000009\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 43
    await testRunner.GivenAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 44
    await testRunner.GivenAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 45
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 47
    await testRunner.AndAsync("the response should contain validation error \"Owner is required\" for field \"Owner" +
                        "\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Owner name with numbers is invalid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "Owner name with numbers is invalid")]
        public async global::System.Threading.Tasks.Task OwnerNameWithNumbersIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "5";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Owner name with numbers is invalid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 49
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 50
    await testRunner.GivenAsync("I have the owner \"Jane 123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 51
    await testRunner.GivenAsync("I have a credit card number \"340000000000009\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 52
    await testRunner.GivenAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 53
    await testRunner.GivenAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 54
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 56
    await testRunner.AndAsync("the response should contain validation error \"Wrong owner\" for field \"Owner\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Owner name with special characters is invalid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "Owner name with special characters is invalid")]
        public async global::System.Threading.Tasks.Task OwnerNameWithSpecialCharactersIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "6";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Owner name with special characters is invalid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 58
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 59
    await testRunner.GivenAsync("I have the owner \"Jane¤#&\"( J(/&\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 60
    await testRunner.GivenAsync("I have a credit card number \"340000000000009\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 61
    await testRunner.GivenAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 62
    await testRunner.GivenAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 63
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 64
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 65
    await testRunner.AndAsync("the response should contain validation error \"Wrong owner\" for field \"Owner\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Owner name with alphanumeric characters is invalid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "Owner name with alphanumeric characters is invalid")]
        public async global::System.Threading.Tasks.Task OwnerNameWithAlphanumericCharactersIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "7";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Owner name with alphanumeric characters is invalid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 67
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 68
    await testRunner.GivenAsync("I have the owner \"Jan3 D03\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 69
    await testRunner.GivenAsync("I have a credit card number \"340000000000009\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 70
    await testRunner.GivenAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 71
    await testRunner.GivenAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 72
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 73
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 74
    await testRunner.AndAsync("the response should contain validation error \"Wrong owner\" for field \"Owner\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Credit card number should be required")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "Credit card number should be required")]
        public async global::System.Threading.Tasks.Task CreditCardNumberShouldBeRequired()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "8";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Credit card number should be required", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 76
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 77
    await testRunner.GivenAsync("I have the owner \"Jane Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 78
    await testRunner.GivenAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 79
    await testRunner.GivenAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 80
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 81
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 82
    await testRunner.AndAsync("the response should contain validation error \"Number is required\" for field \"Numb" +
                        "er\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Credit card number with letters is invalid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "Credit card number with letters is invalid")]
        public async global::System.Threading.Tasks.Task CreditCardNumberWithLettersIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "9";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Credit card number with letters is invalid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 84
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 85
    await testRunner.GivenAsync("I have the owner \"Jane Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 86
    await testRunner.GivenAsync("I have a credit card number \"340000000000abc\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 87
    await testRunner.GivenAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 88
    await testRunner.GivenAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 89
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 90
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 91
    await testRunner.AndAsync("the response should contain validation error \"Wrong number\" for field \"Number\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Credit card number with special characters is invalid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "Credit card number with special characters is invalid")]
        public async global::System.Threading.Tasks.Task CreditCardNumberWithSpecialCharactersIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "10";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Credit card number with special characters is invalid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 93
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 94
    await testRunner.GivenAsync("I have the owner \"Jane Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 95
    await testRunner.GivenAsync("I have a credit card number \"&4000000000000!\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 96
    await testRunner.GivenAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 97
    await testRunner.GivenAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 98
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 99
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 100
    await testRunner.AndAsync("the response should contain validation error \"Wrong number\" for field \"Number\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="CVV should be required")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "CVV should be required")]
        public async global::System.Threading.Tasks.Task CVVShouldBeRequired()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "11";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("CVV should be required", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 102
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 103
  await testRunner.GivenAsync("I have the owner \"John Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 104
  await testRunner.AndAsync("I have a credit card number \"4111111111111111\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 105
  await testRunner.AndAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 106
  await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 107
  await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 108
  await testRunner.AndAsync("the response should contain validation error \"Cvv is required\" for field \"Cvv\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="CVV with letters is invalid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "CVV with letters is invalid")]
        public async global::System.Threading.Tasks.Task CVVWithLettersIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "12";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("CVV with letters is invalid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 110
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 111
    await testRunner.GivenAsync("I have the owner \"Jane Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 112
    await testRunner.GivenAsync("I have a credit card number \"340000000000009\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 113
    await testRunner.GivenAsync("I have the CVV \"abc\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 114
    await testRunner.GivenAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 115
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 116
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 117
    await testRunner.AndAsync("the response should contain validation error \"Wrong cvv\" for field \"Cvv\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="CVV with special characters is invalid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "CVV with special characters is invalid")]
        public async global::System.Threading.Tasks.Task CVVWithSpecialCharactersIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "13";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("CVV with special characters is invalid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 119
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 120
    await testRunner.GivenAsync("I have the owner \"Jane Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 121
    await testRunner.GivenAsync("I have a credit card number \"340000000000009\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 122
    await testRunner.GivenAsync("I have the CVV \"abc!\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 123
    await testRunner.GivenAsync("I have the date \"09/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 124
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 125
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 126
    await testRunner.AndAsync("the response should contain validation error \"Wrong cvv\" for field \"Cvv\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Date should be required")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "Date should be required")]
        public async global::System.Threading.Tasks.Task DateShouldBeRequired()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "14";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Date should be required", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 128
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 129
  await testRunner.GivenAsync("I have the owner \"John Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 130
  await testRunner.AndAsync("I have a credit card number \"4111111111111111\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 131
  await testRunner.AndAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 132
  await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 133
  await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 134
  await testRunner.AndAsync("the response should contain validation error \"Date is required\" for field \"Date\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Date with letters is invalid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "Date with letters is invalid")]
        public async global::System.Threading.Tasks.Task DateWithLettersIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "15";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Date with letters is invalid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 136
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 137
    await testRunner.GivenAsync("I have the owner \"Jane Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 138
    await testRunner.GivenAsync("I have a credit card number \"340000000000009\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 139
    await testRunner.GivenAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 140
    await testRunner.GivenAsync("I have the date \"ab/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 141
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 142
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 143
    await testRunner.AndAsync("the response should contain validation error \"Wrong date\" for field \"Date\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Date with special characters is invalid")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "Date with special characters is invalid")]
        public async global::System.Threading.Tasks.Task DateWithSpecialCharactersIsInvalid()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "16";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Date with special characters is invalid", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 145
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 146
    await testRunner.GivenAsync("I have the owner \"Jane Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 147
    await testRunner.GivenAsync("I have a credit card number \"340000000000009\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 148
    await testRunner.GivenAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 149
    await testRunner.GivenAsync("I have the date \"0!/29\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 150
    await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 151
    await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 152
    await testRunner.AndAsync("the response should contain validation error \"Wrong date\" for field \"Date\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Date should not be expired")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Validate Credit Card")]
        [global::Xunit.TraitAttribute("Description", "Date should not be expired")]
        public async global::System.Threading.Tasks.Task DateShouldNotBeExpired()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "17";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Date should not be expired", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 154
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 155
  await testRunner.GivenAsync("I have the owner \"John Doe\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 156
  await testRunner.AndAsync("I have a credit card number \"4111111111111111\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 157
  await testRunner.AndAsync("I have the date \"09/24\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 158
  await testRunner.AndAsync("I have the CVV \"123\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 159
  await testRunner.WhenAsync("I send a POST request to \"/CardValidation/card/credit/validate\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 160
  await testRunner.ThenAsync("the response status code should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 161
  await testRunner.AndAsync("the response should contain validation error \"Wrong date\" for field \"Date\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await ValidateCreditCardFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await ValidateCreditCardFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
